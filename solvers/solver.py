from vertexai.generative_models import GenerativeModel

class MathProblemSolver:
    def __init__(self, model):
        """
        Initialize the MathProblemSolver with a specific model.

        Args:
            model: An instance of a model that implements the ModelInterface.
        """
        self.model = model

    async def generate_solution(self, image, question):
        """
        Generate a solution for the given image and question.

        Args:
            image: The image data to be analyzed.
            question: The question related to the image.

        Returns:
            The generated solution text.
        """
        content = [image, question]
        response = await self.model.generate_content_async(content)
        return response

    async def review_solution(self, model_response, ground_truth):
        """
        Review the generated solution against the ground truth.

        Args:
            model_response: The response generated by the model.
            ground_truth: The correct answer to compare against.

        Returns:
            A boolean indicating whether the model's response is correct.
        """
        review_prompt = (
            "You are a review model tasked with evaluating the correctness of a response to a math problem. "
            "The response may contain detailed steps and explanations, but the final answer is the key point. "
            "Please determine if the final answer provided in the response is correct based on the ground truth number. "
            "Respond with 'True' if the final answer is correct and 'False' if it is not. "
            "Only respond with 'True' or 'False', nothing else.\n\n"
            "Model Response:\n{model_response}\n\n"
            "Ground Truth:\n{ground_truth}"
        ).format(model_response=model_response, ground_truth=ground_truth)

        review_model_name = "gemini-1.5-flash"  # Use the same model or a different one for review
        review_config = {
            "temperature": 0, "max_output_tokens": 10  # Adjust as needed for the review model
        }
        review_model = GenerativeModel(review_model_name)

        review_response = await review_model.generate_content_async(
            [review_prompt],
            generation_config=review_config,
            stream=False,
        )
        is_correct = review_response.text.strip().lower() == 'true'  # Check if the response is 'True'

        return is_correct